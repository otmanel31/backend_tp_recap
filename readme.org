* Authentifiaction avec passport.js

Mettons en place l'authentification en utilisant [[http://passportjs.org/][passport.js]].
Cette librairie permet d'utiliser des modules séparés pour différentes méthodes
d'authentification.

** Vérification login/password, session avec cookies

Le code fournit montre l'utilisation et la configuration de ~passport~.

*** Configuration

La configuration utilise une session, avec stockage de l'identifiant de session
dans un cookie.

#+BEGIN_SRC javascript
// middlewares
app.use(cookieParser())
app.use(bodyParser.json())
app.use(bodyParser.urlencoded({ extended: true}))
app.use(methodOverride('_method', {methods: ['GET', 'POST']}))
app.use(expressSession({ secret: 'miaou', resave: false, saveUninitialized: false }))

// Initialize Passport 
app.use(passport.initialize())
// restore authentication state from session
app.use(passport.session())
#+END_SRC

La configuration de la stratégie ~passport-local~ nécessite de fournir une fonction qui va
vérifier l'identité d'un utilisateur à partir d'un ~username~ et d'un
~password~:

#+BEGIN_SRC javascript
passport.use(new LocalStrategy(
  (username, password, cb) => {
    // verify that a user matches username and password
    // ok cb(null, user)
    // not ok : cb(null, false)
    // error : cb(err)
})
#+END_SRC

L'implémentation fournie utilise le modèle sequelize déjà vu.

*** Persistence de l'authentification

La session est utilisé pour faire persister l'authentification sur plusieurs
requêtes successives.

Les fonctions ~passport.serializeUser~ et ~passport.deserializeUser~ vont
 stocker/restaurer une représentation de l'utilisateur dans ~req.session~.

*** Utilisation

Suivez le déroulement des appels, en commençant à partir de
[[http://localhost:3000/private]]

1. le middleware ~ensureLoogedIn~ est appelé: il teste si ~req.user~ existe, et
   redirige vers la page de login si ce n'est pas le cas, et stocke également
   l'url initialement demandée.
2. 
* COMMENT plan

factorisation de db.User.findById et 404

routage REST
servir à la fois json et html
que du html pour la 1ère séance, rajouter le json en 2e partie

pratiquer les bases de données : fournir le module pour la gestion user

faire utiliser passport

bounty hunter:

proposer un sujet de bounty, requière auth
rajouter une somme
proposer solution à bounty
valider solution

relation bounty/auteur

devra être repris dans la partie SPA comme exemple



